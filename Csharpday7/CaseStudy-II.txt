- Create Enroll class with the following structure:
   - public class Enroll {
	private Student student;
	private Course course;
	private LocalDate enrollmentDate;

	//constructors & getters/setters
     }

- Next create AppEngine class which will contain the following methods:

  - public void introduce(Course course) {

    }

  - public void register(Student student) {

    }

  - public Student[] listOfStudents() {

    }

  - public Course[] listOfCourses() {

    }

  - public void enroll(Student student, Course course) {

    }

  - public Enroll[] listOfEnrollments() {

    }

- Write App class with main method to test the above functionalities
  - Ask trainees to modify Info class by adding new methods for displaying Enrollment details
- Enchance the Enroll class from Day 2 and ask the trainees to use Collection API instead of Arrays

- Then the next step is to create user interface for our application.

- Create an abstract class/interface (UserInterface) with the following methods:
	public void showFirstScreen();
	public void showStudentScreen();
	public void showAdminScreen();
	public void showAllStudentsScreen();
	public void showStudentRegistrationScreen(); // Execute the register method of AppEngine class
	public void introduceNewCourseScreen();
	public void showAllCoursesScreen();

  - The code for showFirstScreen() may look like this in Java:

	public void showFirstScreen() {
		System.out.println("Welcome to SMS(Student Mgmt. System) v1.0");
		System.out.println("Tell us who you are : \n1. Student\n2. Admin");
		System.out.println("Enter your choice ( 1 or 2 ) : ");
		Scanner scanner = new Scanner(System.in);
		int op = Integer.parseInt(scanner.nextLine());
		switch(op) {
		case 1:
			showStudentScreen();
			break;
		case 2:
			showAdminScreen();
			break;
		}
	}

- From the App class now, all we would do in the main method is:
   - new UserInterface().showFirstScreen();
   
   
   
   - We had created an AppEngine class before to store data in memory.
- All we need to do now is to modify that code and introduce database connectivity.

For ex: the code for register method might look like this in Java

    public void register(Student student) {
		Connection conn = null;
		PreparedStatement stmt = null;
		try {
			Class.forName("org.apache.derby.jdbc.ClientDriver");
			conn = DriverManager.getConnection("jdbc:derby://localhost:1527/training","user","pass");
			
			String sql = "insert into student values(?,?,?)";
			stmt = conn.prepareStatement(sql);
			
			stmt.setInt(1, student.getId());
			stmt.setString(2, student.getName());
			stmt.setInt(3, student.getRollno());
			stmt.executeUpdate();
		}
		catch(ClassNotFoundException | SQLException e) {
			e.printStackTrace(); //instead throw user defined exception
		}
		finally {
			try { stmt.close(); } catch(Exception e) { }
			try { conn.close(); } catch(Exception e) { }
		}
    }




